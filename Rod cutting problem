#include <bits/stdc++.h>
using namespace std;

int f(int ind, int n, vector<int> &price, vector<vector<int>> &dp){
    if(ind==0){
        return n*price[0];
    }
    
    if(dp[ind][n] != -1) return dp[ind][n];
    
    int notTake = 0+f(ind-1, n, price, dp);
    
    int take=INT_MIN;
    int rodLen=ind+1;
    if(rodLen<=n){
        take=price[ind]+f(ind, n-rodLen,price, dp);
    }
    
    return dp[ind][n]=max(take, notTake);
}

int main()
{
    int N=5;
    vector<int> price = {1,4,3,4,5};
    
    
    vector<vector<int>> dp1 (N, vector<int> (N+1, -1));
    
    cout<<f(N-1, N, price, dp1)<<endl;
    
    //tabulation
    
    vector<vector<int>> dp (N, vector<int> (N+1, 0));
    
    for(int n=0; n<=N; n++) dp[0][n]= n*price[0];
    
    for(int ind=1; ind<N; ind++){
        for(int n=0; n<=N; n++){
            int notTake = 0+dp[ind-1][n];
            int take=INT_MIN;
            int rodLen=ind+1;
            if(rodLen<=n){
                take=price[ind]+dp[ind][n-rodLen];
            }
    
            dp[ind][n]=max(take, notTake);
        }
    }
    
    cout<<dp[N-1][N]<<endl;
    
    //space optimisation
    
    vector<int> prev(N+1, 0), curr(N+1, 0);
    
    for(int n=0; n<=N; n++) prev[n]=n*price[0];
    
    for(int ind=1; ind<N; ind++){
        for(int n=0; n<=N; n++){
            int notTake = 0+prev[n];
            int take=INT_MIN;
            int rodLen=ind+1;
            if(rodLen<=n){
                take=price[ind]+curr[n-rodLen];
            }
    
            curr[n]=max(take, notTake);
        }
        prev=curr;
    }
    
    cout<<prev[N]<<endl;
    
    //further space optimisation
    
    vector<int> prev2(N+1, 0);
    
    for(int n=0; n<=N; n++) prev2[n]=n*price[0]; 
    
    for(int ind=1; ind<N; ind++){
        for(int n=0; n<=N; n++){
            int notTake = 0+prev2[n];
            int take=INT_MIN;
            int rodLen=ind+1;
            if(rodLen<=n){
                take=price[ind]+prev2[n-rodLen];
            }
    
            prev2[n]=max(take, notTake);
        }
    }
    
    cout<<prev2[N]<<endl;
    return 0;
}



