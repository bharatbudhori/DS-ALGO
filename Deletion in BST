#include <bits/stdc++.h>
using namespace std;

struct Node{
  int data;
  struct Node* left;
  struct Node* right;
  
  Node(int val){
      data=val;
      left=NULL;
      right=NULL;
  }
};


void inorder(struct Node* root){
    if(root==NULL){
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
   
}

Node* insertBST(Node* root, int val){
    if(root==NULL){
        return new Node(val);
    }
    if(val<root->data){
        root->left=insertBST(root->left,val);
    }
    else{
        root->right=insertBST(root->right,val);
    }
    return root;
}

Node* searchInBst(Node*root, int key){
    if(root==NULL){
        return NULL;
    }
    if(root->data==key){
        return root;
    }
    if(key < root->data){
        return searchInBst(root->left,key);
    }
    return searchInBst(root->right,key);

    
}

Node* inorderSucc(Node* root){
    Node* curr=root;
    
    while(curr && curr->left != NULL){
        curr=curr->left;
    }
    return curr;
}

Node* deleteInBST(Node* root, int key){
    if(key<root->data){
        root->left=deleteInBST(root->left,key);
    }
    else if(key>root->data){
        root->right=deleteInBST(root->right,key);
    }
    else{
        if(root->left==NULL){
            Node* temp=root->right;
            free(root);
            return temp;
        }
        else if(root->right==NULL){
            Node* temp=root->left;
            free(root);
            return temp;
        }
        //case 3
        Node* temp=inorderSucc(root->right);
        root->data=temp->data;
        root->right=deleteInBST(root->right, temp->data);
    }
    return root;
}

int main(){
    Node* root=NULL;
    root=insertBST(root,5);
    insertBST(root,1);
    insertBST(root,3);
    insertBST(root,4);
    insertBST(root,2);
    insertBST(root,7);
    
    //inorder(root);
    //if(searchInBst(root,7)==NULL){
    //    cout<<"Key not found"<<endl;
    //}
    //else{
    //    cout<<"key exists"<<endl;
    //}
    
    deleteInBST(root,5);
    inorder(root);
    cout<<endl;
    deleteInBST(root,2);
    inorder(root);
    
    return 0;
    
}
