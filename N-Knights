#include <bits/stdc++.h>
using namespace std;

bool isValid(vector<vector<bool>> board, int row, int col){
    if(row >= 0 && row < board.size() && col >= 0 && col < board.size()){
        return true;
    }
    return false;
}

bool isSafe(vector<vector<bool>> board, int row, int col){
    
    if(isValid(board, row-2, col-1)){
        if(board[row-2][col-1]){
            return false;
        }
    }
    
    if(isValid(board, row-1, col-2)){
        if(board[row-1][col-2]){
            return false;
        }
    }
    
    if(isValid(board, row-2, col+1)){
        if(board[row-2][col+1]){
            return false;
        }
    }
    
    if(isValid(board, row-1, col+2)){
        if(board[row-1][col+2]){
            return false;
        }
    }
    
    return true;
   
}

void display(vector<vector<bool>> board){
    for(int i=0; i<board.size(); i++){
        for(int j=0; j<board.size(); j++){
            if(board[i][j] == true){
                cout<<"K"<<" ";
            }
            else{
                cout<<"x"<<" ";
            }
        }
        cout<<endl;
    }
    cout<<endl;
}

void nKnights(vector<vector<bool>> board, int row, int col, int knights){
    if(knights == 0){
        display(board);
        return ;
    }
    
    if(row == board.size()-1 && col == board.size()){
        return;
    }
    
    if(col == board.size()){
        nKnights(board, row+1, 0, knights);
        return;
    }
    
    if(isSafe(board, row ,col)){
        board[row][col] = true;
        nKnights(board, row, col+1, knights-1);
        
        board[row][col] = false;
    }
    
    nKnights(board, row, col+1, knights);
    
    
    //return count;
    
}



int main()
{
    vector<vector<bool>> board = {
                                    {0,0,0,0},
                                    {0,0,0,0},   
                                    {0,0,0,0},
                                    {0,0,0,0}
                                };

    nKnights(board, 0, 0, 4);
    
    return 0;
}
