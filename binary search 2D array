#include <bits/stdc++.h>
using namespace std;

vector<int> binarySearch(vector<vector<int>> matrix, int row, int cStart, int cEnd, int target){
    while (cStart <= cEnd) {
        int mid = cStart + (cEnd - cStart) / 2;
        if (matrix[row][mid] == target) {
            return {row, mid};
        }
        if (matrix[row][mid] < target) {
            cStart = mid + 1;
        } else {
            cEnd = mid - 1;
        }
    }
    return {-1, -1};
}

vector<int> search(vector<vector<int>> matrix, int target){
    int rows=matrix.size();
    int cols = matrix[0].size();
    
    if(rows==1){
        return binarySearch(matrix, 0, 0, cols-1, target);
    }
    
    int rStart = 0;
    int rEnd = rows-1;
    
    int cMid = cols/2;
    
    while(rStart < (rEnd-1)){
        int mid = rStart+(rEnd-rStart)/2;
        
        if(matrix[mid][cMid] == target){
            return {mid, cMid};
        }
        else if(matrix[mid][cMid] < target){
            rStart=mid;
        }
        else{
            rEnd=mid;
        }
    }
    
    //now we have 2 rows
    //check weather middle cols contains ans 
    
    if(matrix[rStart][cMid] == target){
        return {rStart,cMid};
    }
    
    if(matrix[rStart+1][cMid] == target){
        return {rEnd,cMid};
    }
    
    // search in 1st half
    if (target <= matrix[rStart][cMid - 1]) {
        return binarySearch(matrix, rStart, 0, cMid-1, target);
    }
    // search in 2nd half
    if (target >= matrix[rStart][cMid + 1] && target <= matrix[rStart][cols - 1]) {
        return binarySearch(matrix, rStart, cMid + 1, cols - 1, target);
    }
    // search in 3rd half
    if (target <= matrix[rStart + 1][cMid - 1]) {
        return binarySearch(matrix, rStart + 1, 0, cMid-1, target);
    } else {
        return binarySearch(matrix, rStart + 1, cMid + 1, cols - 1, target);
    }
    
    
}

int main()
{
    vector<vector<int>> arr = {
                                {1,2,3,4,5},
                                {6,7,8,9,10},
                                {11,12,13,14,15},
                                {16,17,18,19,20}
                              };
                              
    vector<int> ans = search(arr, 20);
    
    cout<<ans[0]<<" "<<ans[1];

    return 0;
}
