class Solution {
public:
    int minimumDifference(vector<int>& arr) {
        int totSum = 0;
        int n=arr.size();
        
        for(int i=0; i<n; i++){
            totSum+=arr[i];
        }
        int k=totSum;
        
        vector<vector<int>> dp(n, vector<int> (k+1, 0));

        //cout<<f(n-1, k, arr, dp);

        for(int i=0; i<n; i++) dp[i][0]=1; 
        if(arr[0]<=k) dp[0][arr[0]]=1;

        for(int ind=1; ind<n; ind++){
            for(int target=1; target<=k; target++){
                bool notTake = dp[ind-1][target];

                bool take=false;
                if(arr[ind]<=target){
                    take = dp[ind-1][target-arr[ind]];
                }

                dp[ind][target] = take | notTake;
            }
        }
        
        int mini=1e9;
        
        for(int s1=0; s1<=totSum/2; s1++){
            if(dp[n-1][s1]){
                mini = min(mini, abs((totSum-s1)-s1));
            }
        }
        return mini;

    }
};
