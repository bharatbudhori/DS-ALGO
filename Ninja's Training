#include <bits/stdc++.h>
using namespace std;

int f(int day, int last, vector<vector<int>> &points, vector<vector<int>> &dp){
    if(day==0){
        int maxi=0;
        for(int task=0; task<3; task++){
            if(task!=last){
                maxi=max(maxi, points[0][task]);
            }
        }
        return maxi;
    }
    
    if(dp[day][last] != -1) return dp[day][last];
    
    int maxi=0;
    
    for(int task=0; task<3; task++){
        if(last!=task){
            int point = points[day][task] + f(day-1, task, points,dp);
            maxi=max(maxi,point);
        }
    }
    return dp[day][last] = maxi;
}

int main()
{
    vector<vector<int>> points = {
                                    {2,1,3},
                                    {3,4,6},
                                    {10,1,6},
                                    {8,3,7},
        
                                };
                                
    //vector<vector<int>> dp (points.size(), vector<int>(4,-1));
    
    
    //cout<<f(points.size()-1,3,points, dp);
    
    //memoization solution
    vector<vector<int>> dp (points.size(), vector<int>(4,0));
     
    dp[0][0] = max(points[0][1], points[0][2]);
    dp[0][1] = max(points[0][0], points[0][2]);
    dp[0][2] = max(points[0][0], points[0][1]);
    dp[0][3] = max(points[0][0], max(points[0][2], points[0][1]));
     
    for(int day =1; day<points.size(); day++){
        for(int last=0; last<4; last++){
            dp[day][last]=0;
            
            
            for(int task=0; task<3; task++){
                if(task != last){
                    int point = points[day][task] + dp[day-1][task];
                    dp[day][last]=max(dp[day][last],point);
                }
            }
            
            
        }
    }
     
    cout<<dp[points.size()-1][3]<<endl;
    
    //space optimization
    vector<int> dp2 (4,0);
    
    dp2[0] = max(points[0][1], points[0][2]);
    dp2[1] = max(points[0][0], points[0][2]);
    dp2[2] = max(points[0][0], points[0][1]);
    dp2[3] = max(points[0][0], max(points[0][2], points[0][1]));
    
    for(int day =1; day<points.size(); day++){
        vector<int> temp(4,0);
        for(int last=0; last<4; last++){
            temp[last]=0;
            
            
            for(int task=0; task<3; task++){
                if(task != last){
                    int point = points[day][task] + dp2[task];
                    temp[last]=max(temp[last],point);
                }
            }
            
            
        }
        dp2=temp;
    }
    
    cout<<dp2[3];
    

    return 0;
}
