class Solution {
public:
    
    int solve(vector<vector<int>>& triangle,int index,int col,int n, vector<vector<int>>& t){
        if(index==n)    
            return 0;
        if(t[index][col]!=-1)   
            return t[index][col];
        return t[index][col]=min(solve(triangle,index+1,col,n,t),solve(triangle,index+1,col+1,n, t))+triangle[index][col];
}
    
    int minimumTotal(vector<vector<int>>& triangle){
        int n = triangle.size();
        
        /*
        vector<vector<int>> dp (n, vector<int> (n,0));
            
        //return solve(triangle,0,0,n, dp);
        
        //tabulation
        
        for(int j=0; j<n; j++){
            dp[n-1][j]=triangle[n-1][j];
        }
        
        for(int i=n-2; i>=0; i--){
            for(int j=i; j>=0; j--){
                int dwn=triangle[i][j]+dp[i+1][j];
                int dg=triangle[i][j]+dp[i+1][j+1];
                
                dp[i][j]=min(dwn,dg);
            }
            
        }
        return dp[0][0];
        */
        
        vector<int> front (n,0), curr(n,0);
        
        for(int j=0; j<n; j++){
            front[j]=triangle[n-1][j];
        }
        
        for(int i=n-2; i>=0; i--){
            for(int j=i; j>=0; j--){
                int dwn=triangle[i][j]+front[j];
                int dg=triangle[i][j]+front[j+1];
                
                curr[j]=min(dwn,dg);
            }
            front=curr;
        }
        return front[0];
    }
};
