#include <bits/stdc++.h>
using namespace std;

bool isSafe(vector<vector<bool>> board, int row, int col){
    //check vertical row
    
    for(int i=0; i<row; i++){
        if(board[i][col]){
            return false;
        }
    }
    
    //diagonal left
    int maxLeft = min(row, col);
    for(int i=1; i<=maxLeft; i++){
        if(board[row-i][col-i]){
            return false;
        }
    }
    
    //diagonal RIGHT
    int l=board.size();
    int maxRight = min(row, l-col-1);
    for(int i=1; i<=maxRight; i++){
        if(board[row-i][col+i]){
            return false;
        }
    }
    
    return true;
}

void display(vector<vector<bool>> board){
    for(int i=0; i<board.size(); i++){
        for(int j=0; j<board.size(); j++){
            if(board[i][j] == true){
                cout<<"Q"<<" ";
            }
            else{
                cout<<"x"<<" ";
            }
        }
        cout<<endl;
    }
    cout<<endl;
}

int nQueens(vector<vector<bool>> board, int row){
    if(row == board.size()){
        display(board);
        return 1;
    }
    
    int count = 0;
    
    for(int col=0; col<board.size(); col++){
        //place queen if it is safe
        
        if(isSafe(board, row, col)){
            board[row][col]=true;
            count += nQueens(board, row+1);
            
            board[row][col] = false;   //backtracking
        }
    }
    
    return count;
    
}



int main()
{
    vector<vector<bool>> board = {
                                    {0,0,0,0},
                                    {0,0,0,0},   
                                    {0,0,0,0},
                                    {0,0,0,0}
                                };

    cout<< nQueens(board, 0);
    
    return 0;
}
